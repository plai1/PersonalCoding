class vs className
  * grammar in JSX mostly similar to HTML but have subtle differences
  * most frequent is 'class'
      - In HTML, 'class' used as attribute name
          * <h1 class="big">Hey</h1>
      - In JSX, can't use 'class'. have to use className
          * <h1 className="big">Hey</h1>
      - name change because JSX is translated into JavaScript and 'class' is reserved word in JavaScript
      - When JSX is rendered, JSX 'className' attributes are automatically rendered as 'class' attributes



Self-Closing Tags
  * in HTML, there is opening tag (<div>) and closing tag (</div>), yet some HTML elements (<img>, <input>
    ) use only one tag.
        - tag that belongs to single-tag element isn't opening tag nor closing tag; it's a self-closing tag
  * in HTML, it's optional to include forward-slash immediately before final angle-bracket
      - <br /> or <br>
  * in JSX, you have to include slash
      - if writing self-closing tag in JSX and forget slash, error will be raised
      - Example:
          '<br />' is fine
          '<br>' is not fine


Writing in JavaScript in JSX expression within JavaScript file
  * any code between JSX element tags will be read as JSX, not regular javascript
      - read them as text
  * to treat code between JSX element tags, wrap it with curly braces
      - Example:
          ReactDOM.render(<h1>{2+3}<h1/>, document.getElementById('app'));
      - will print '5' because of curly brackets ({}) in <h1> elements


Variables in JSX
  * variables with javascript values can be called into JSX with curly brackets as well when rendering
  * it's common to use variables to set attributes in JSX
      - Example:
          const sideLength = "200px";

          const panda = (
            <img
            src="images/panda.jpg"
            alt="panda"
            height={sideLength}
            width={sideLength} />
          );
  * object properties also often used to set attributes
      - example:
      const pics = {
        panda: "http://bit.ly/1Tqltv5",
        owl: "http://bit.ly/1XGtkM3",
        owlCat: "http://bit.ly/1Upbczi"
      };

      const panda = (
        <img
        src={pics.panda}
        alt="Lazy Panda" />
      );

      const owl = (
        <img
        src={pics.owl}
        alt="Unimpressed Owl" />
      );

      const owlCat = (
        <img
        src={pics.owlCat}
        alt="Ghastly Abomination" />
      );





Event Listeners in JSX
  * Programming in React means constantly working with event listeners
      - example:
          <img onClick={myFunc} />
      - name of event listener attribute: 'onClick'
  * Event listener attribute's value should be a function
  * In HTML, event listener names are written in lowercase; in JSX, event listener names written in camelCase






JSX Conditionals:

  * If Statements That Don't Work
    - can't inject 'if' statement in JSX
    - one option to write conditional is write 'if' statement and not inject it into JSX
        + write 'if/else' statement outside of JSX tags

  * The Ternary Operator
    - ternary operator works same way in React as it does in regular JavaScript, but it shows up in React more often
        + ternary operator: 'x ? y : z'
        + 'x', 'y', and 'z' are all JavaScript expressions
            # when executed, 'x' evaluated as truthy or falsy
                * if true, operator returns 'y'
                * if false, operator returns 'z'
        + Example in JSX :
              const headline = {
                <h1>
                  { age >= drinkingAge ? 'Buy Drinkg' : 'Do Teen Stuff' }
                </h1>
              };
  * &&
      - similar to ternary operator, '&&' is not React-specific but shows up in React surprisingly often
      - '&&' works best in conditionals that will sometimes do an action, but other times do nothing at all
          # Example:
              const tasty = (
                <ul>
                  <li>AppleSauce</li>
                  { !baby && <li>Pizza</li>}
                  { age > 15 && <li>Brussels Sprouts</li> }
                  { age > 20 && <li>Oysters</li> }
                  { age > 25 && <li>Grappa</li> }
                </ul>
              )
          # code like this with '&&', either some will run or not at all





.map in JSX
  * array method '.map()' comes up often in React; it's good to get in habit of using it alongside JSX
  * best usable when making a list
      - example:
          const strings = ['Home', 'Shop', 'About Me'];

          const listItems = strings.map(string => <li>{string}</li>);

          <ul>{listItems}</ul>



Keys
  * when making list in JSX, list would sometimes need to include something called 'keys'
    - example:
        <ul>
          <li key="li-01">Example1</li>
          <li key="li-02">Example2</li>
          <li key="li-03">Example3</li>
        </ul>
  * 'key' is JSX attribute; attribute's name is 'key', attribute value should be unique (similar to 'id' attribute)
  * React uses them internally to keep track of list
      - without it, react might accidently scramble list-items in wrong order
  * list needs 'keys' in React of one of the following is true:
      1. list-items have memory from one render to next
          + example: when to-do list renders, each items must 'remember' whether it was checked off
          + items shouldn't get amnesia when rendered
      2. list's order might be shuffled
          + example: list of search results might be shuffled from one render to the next
  * if neither conditions are true, then don't worry about 'keys',
      -if unsure, use them just in case




React.createElement
  * possible to write React code without JSX at all
  * majority of React programmer use JSX, but it is possible to write React code without it
      -example:

             const h1 = <h1>Hello world</h1>;

          can be written without JSX, like this:

            const h1 = React.createElement(
              "h1",
              null,
              "Hello, world"
            );
      - when JSX element compiled, compiler transforms JSX element into method above ('React.createElement()')
      - every JSX element secretly a call to 'React.createElement()' 
